var search_data = {"index":{"searchIndex":["moviedata","movietest","add()","load_data()","mean()","most_similar()","movies()","new()","new()","popularity()","popularity_list()","predict()","rating()","rms()","run_test()","similarity()","stddev()","to_a()","viewers()"],"longSearchIndex":["moviedata","movietest","movietest#add()","moviedata#load_data()","movietest#mean()","moviedata#most_similar()","moviedata#movies()","moviedata::new()","movietest::new()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","movietest#to_a()","moviedata#viewers()"],"info":[["MovieData","","MovieData.html","","<p>Name: Nishan Acharya Email: acharyan@brandeis.edu Date: 31st January 2016\nCOSI166B (PA) Movies-2\n"],["MovieTest","","MovieTest.html","",""],["add","MovieTest","MovieTest.html#method-i-add","(user_id, movie_id, rating, prediction)","<p>adds the requrired data to the finalList\n"],["load_data","MovieData","MovieData.html#method-i-load_data","(filename)","<p>creates an array dataSet containing array of complete datas\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>finds the mean error in the prediction rating in comparison to the actual\nratings\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(user1)","<p>Calculates similarity for all the users who are similar to user1 and\nreturns them in decreasing order …\n"],["movies","MovieData","MovieData.html#method-i-movies","(user)","<p>returns the list of all the movies watched by the given user\n"],["new","MovieData","MovieData.html#method-c-new","(filename)","<p>constructor\n"],["new","MovieTest","MovieTest.html#method-c-new","()","<p>constructor\n"],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>Popularity is counted as the average rating received by the movie\nmultiplied by the number of ratings …\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","()","<p>ties the movie with its popularity rating using the popularity method and\nthen returns the list of most …\n"],["predict","MovieData","MovieData.html#method-i-predict","(user, movie)","<p>predicts what rating a user would give to a movie\n"],["rating","MovieData","MovieData.html#method-i-rating","(user, movie)","<p>returns rating given by the user and 0 if no rating was provided\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>returns the root mean square error of the prediction\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k)","<p>predicts the rating for the given number of ratings(k) and then creates an\nobject MovieTest with the …\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2)","<p>Similarity between user preference for movies is calculated as the average\nratings received by a movie …\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>returns the standard deviation of the errors\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>returns the list of all the data containg user_id, movie_id, rating, and\npredicted rating in the form …\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(movie)","<p>returns the list of all the users who watched the given movie\n"]]}}